/*
There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Eg:1
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

*/

class Solution {
    public int search(int[] nums, int target) {
        
        int left=0,right=nums.length-1;
        while(left<right)
        {
            if(nums[left]>nums[right]) 
            {
                if(nums[right] == target) return right;
                right--;
            }
            else break;
        }
        System.out.println(left+" "+right);
        if(nums[left]<target && nums[right]>target) return binarySearch(left,right,nums,target);
        else if(nums[left]==target) return left;
        else if(nums[right]==target) return right;
        else if((right+1)<nums.length && nums[right+1]<target && nums[nums.length - 1]>target) return binarySearch(right+1,nums.length-1,nums,target);
        else if((right+1)<nums.length && nums[right+1]==target) return right + 1;
        else if(nums[nums.length - 1]==target) return nums.length - 1;
        return -1;
        
    }
    public int binarySearch(int left,int right,int[] nums,int target)
    {
        if(right>=left)
        {
            int mid=left + (right-left)/2;
            if(nums[mid] == target) return mid;
            else if(nums[mid]>target) return binarySearch(left,mid-1,nums,target);
            else if(nums[mid]<target) return binarySearch(mid+1,right,nums,target);   
        }
        
        return -1;
        
    }
}
