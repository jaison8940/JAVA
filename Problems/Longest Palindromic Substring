/*
Given a string s, return the longest palindromic substring in s.

Eg:1
Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.

*/

class Solution {
    
    public String longestPalindrome(String s) {
        
        
        String maxStr = new String();
        if(s.length()==1) return s;
        else if(s.length()==2 && s.charAt(0)!=s.charAt(1)) return s.substring(0,1);
        else if(s.length()==2 && s.charAt(0)==s.charAt(1)) return s;
        int[] alp = new int[150];
        for(int i=0;i<s.length();i++) alp[s.charAt(i)]++;
        // for(int i=97;i<123;i++) System.out.println(alp[i]);
        for(int i=0;i<s.length()-1;i++)
        {
            if(alp[s.charAt(i)]>1)
            {
                for(int j=s.length()-1;j>i;j--)
            {
                if(s.charAt(i)==s.charAt(j) && findifpalindrome(s.substring(i,j+1))) maxStr = maxStr.length()<(j-i+1)?s.substring(i,j+1):maxStr;
                if(maxStr.length() == s.length()) return maxStr;
            }
            }
            
            
        }
        if(maxStr.equals("")) maxStr+=s.charAt(0);
        return maxStr;        
    }
    
    public boolean findifpalindrome(String s)
    {    
        StringBuilder str = new StringBuilder(s);
        StringBuilder temp = new StringBuilder(s);
        temp.reverse();
        if((temp.toString()).equals(str.toString()))
        {
            return true;        
        }
        else return false;        
    }
    
}
