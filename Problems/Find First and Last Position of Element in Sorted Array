/*
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

Eg:1
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

*/

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n=nums.length;
        int left = 0, right = n-1,leftc=0,rightc=0;
        if(n==0) return new int[]{-1,-1};
        else if(nums[right]<target) return new int[]{-1,-1};
        else if(nums[left]==target && nums[right]==target) return new int[]{left,right};
        int[] result =  binarySearch(left,right+1,nums,target);
        System.out.println(result[0]+"----"+result[1]);
        return result;
        
    }
    public int[] binarySearch(int l,int r,int[] nums,int target)
    {
        if(r>=l)
        {
            int mid = (l+r)/2;
            if(nums[mid] == target)
            {
                System.out.println(mid);
                int startIndex=mid,endIndex=mid;
                while(startIndex-1>=0 && nums[startIndex-1]==target) startIndex--;
                while(endIndex+1<nums.length && nums[endIndex+1]==target) endIndex++;
                return new int[]{startIndex,endIndex};

            }
            else if(nums[mid]>target) return binarySearch(l,mid - 1,nums,target);
            else if(nums[mid]<target) return binarySearch(mid + 1,r,nums,target);
        }        
        
        return new int[]{-1,-1};
    }
}
